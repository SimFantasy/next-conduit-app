// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())
  username String @unique
  email String @unique
  password String
  bio String? @default("")
  image String? @default("/images/default-avatar.png")

  followers Follows[] @relation("Following")
  following Follows[] @relation("Follower")

  articles Article[]
  favorites Favorites[]
  comments Comment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Follows {
  id String @id @default(uuid())
  followerId String
  follower User @relation("Follower",fields: [followerId], references: [id], onDelete: Cascade)
  followingId String
  following User @relation("Following",fields: [followingId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Article {
  id String @id @default(uuid())
  title String
  slug String @unique
  description String
  body String
  clicks Int @default(0)
  score Int @default(0)

  authorId String
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)

  media Media[]
  tagList Tags[]
  favorites Favorites[]
  favoritesCount Int @default(0)
  comments Comment[] 

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Media {
  id String @id @default(uuid())
  url String

  articleId String
  article Article @relation(fields: [articleId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Favorites {
  id String @id @default(uuid())

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  articleId String
  article Article @relation(fields: [articleId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id String @id @default(uuid())
  body String
  authorId String
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  articleId String
  article Article @relation(fields: [articleId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tag {
  id String @id @default(uuid())
  name String @unique
  articles Tags[]
}

model Tags {
  id String @id @default(uuid())
  tagId String
  tag Tag @relation(fields: [tagId], references: [id], onDelete: Cascade)
  articleId String
  article Article @relation(fields: [articleId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}